require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe QuestionsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Question. As you add validations to Question, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    # skip("Add a hash of attributes valid for your model")
    {content: 'Who is he?', answer: 'Hillary Clinton'}
  }

  let(:invalid_attributes) {
    # skip("Add a hash of attributes invalid for your model")
    {content: 'Who is he?', answer: ''}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # QuestionsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all questions as @questions" do
      question = Question.create! valid_attributes
      get :index, params: {}, session: valid_session
      expect(assigns(:questions)).to eq([question])
    end
  end

  describe "GET #show" do
    it "assigns the requested question as @question" do
      question = Question.create! valid_attributes
      get :show, params: {id: question.to_param}, session: valid_session
      expect(assigns(:question)).to eq(question)
    end
  end

  describe "GET #new" do
    it "assigns a new question as @question" do
      get :new, params: {}, session: valid_session
      expect(assigns(:question)).to be_a_new(Question)
    end
  end

  describe "GET #edit" do
    it "assigns the requested question as @question" do
      question = Question.create! valid_attributes
      get :edit, params: {id: question.to_param}, session: valid_session
      expect(assigns(:question)).to eq(question)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Question" do
        expect {
          post :create, params: {question: valid_attributes}, session: valid_session
        }.to change(Question, :count).by(1)
      end

      it "assigns a newly created question as @question" do
        post :create, params: {question: valid_attributes}, session: valid_session
        expect(assigns(:question)).to be_a(Question)
        expect(assigns(:question)).to be_persisted
      end

      it "redirects to the created question" do
        post :create, params: {question: valid_attributes}, session: valid_session
        expect(response).to redirect_to(Question.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved question as @question" do
        post :create, params: {question: invalid_attributes}, session: valid_session
        expect(assigns(:question)).to be_a_new(Question)
      end

      it "re-renders the 'new' template" do
        post :create, params: {question: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {content: '1 + 1 = ?', answer: '2'}
      }

      it "updates the requested question" do
        question = Question.create! valid_attributes
        put :update, params: {id: question.to_param, question: new_attributes}, session: valid_session
        question.reload
        # skip("Add assertions for updated state")
      end

      it "assigns the requested question as @question" do
        question = Question.create! valid_attributes
        put :update, params: {id: question.to_param, question: valid_attributes}, session: valid_session
        expect(assigns(:question)).to eq(question)
      end

      it "redirects to the question" do
        question = Question.create! valid_attributes
        put :update, params: {id: question.to_param, question: valid_attributes}, session: valid_session
        expect(response).to redirect_to(question)
      end
    end

    context "with invalid params" do
      it "assigns the question as @question" do
        question = Question.create! valid_attributes
        put :update, params: {id: question.to_param, question: invalid_attributes}, session: valid_session
        expect(assigns(:question)).to eq(question)
      end

      it "re-renders the 'edit' template" do
        question = Question.create! valid_attributes
        put :update, params: {id: question.to_param, question: invalid_attributes}, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested question" do
      question = Question.create! valid_attributes
      expect {
        delete :destroy, params: {id: question.to_param}, session: valid_session
      }.to change(Question, :count).by(-1)
    end

    it "redirects to the questions list" do
      question = Question.create! valid_attributes
      delete :destroy, params: {id: question.to_param}, session: valid_session
      expect(response).to redirect_to(questions_url)
    end
  end

  describe "POST #check_answer" do
    let(:question_attributes_with_number) {
        {content: '1 + 1 = ?', answer: '2'}
      }
    let(:question_attributes_with_words){
      {content: 'Who is the president of Indonesia?', answer: 'Joko Widodo'}
    }
    context "with right answer" do
      it "check the right number with word" do
        question_with_number = Question.create! question_attributes_with_number
        next_question = Question.create! question_attributes_with_words
        post :check_answer, params: {id: question_with_number.id, question: {answer: "two"}}, session: valid_session
        expect(response).to redirect_to(features_quiz_path(id: next_question))
      end

      it "check the right number with number" do
        question_with_number = Question.create! question_attributes_with_number
        next_question = Question.create! question_attributes_with_words
        post :check_answer, params: {id: question_with_number.id, question: {answer: "2"}}, session: valid_session
        expect(response).to redirect_to(features_quiz_path(id: next_question))
      end

      it "check the right words" do
        question_with_number = Question.create! question_attributes_with_words
        next_question = Question.create! question_attributes_with_number
        post :check_answer, params: {id: question_with_number.id, question: {answer: "Joko widodo"}}, session: valid_session
        expect(response).to redirect_to(features_quiz_path(id: next_question))
      end

      it "check the right words with corrected answer" do
        question_with_number = Question.create! question_attributes_with_words
        next_question = Question.create! question_attributes_with_number
        post :check_answer, params: {id: question_with_number.id, question: {answer: "Joko widod"}}, session: valid_session
        expect(response).to redirect_to(features_quiz_path(id: next_question))
      end
    end

    context "with wrong answer" do
      it "check the close answer" do
        session[:lives] = 3
        question = Question.create! question_attributes_with_words
        post :check_answer, params: {id: question.id, question: {answer: "Joko wid"}}, session: valid_session
        expect(response).to redirect_to(features_quiz_path(id: question))
      end

      it "check the wrong answer" do
        session[:lives] = 3
        question = Question.create! question_attributes_with_words
        post :check_answer, params: {id: question.id, question: {answer: "Harambe"}}, session: valid_session
        expect(response).to redirect_to(features_quiz_path(id: question))
      end
    end

    context "final state of quiz" do
      it "game over" do
        session[:lives] = 1
        question = Question.create! question_attributes_with_words
        post :check_answer, params: {id: question.id, question: {answer: "Harambe"}}, session: valid_session
        expect(response).to redirect_to(features_game_over_path)
      end

      it "check the wrong answer" do
        session[:lives] = 3
        question = Question.create! question_attributes_with_words
        post :check_answer, params: {id: question.id, question: {answer: "Joko Widodo"}}, session: valid_session
        expect(response).to redirect_to(features_score_path)
      end
    end
  end
end
